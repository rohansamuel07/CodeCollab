When running your project, follow this sequence:  

### **1Ô∏è‚É£ Start Docker Engine (if not already running)**  
Since your backend execution relies on Docker, you **must** ensure that Docker Engine is running first.  

- Open **Docker Desktop** and make sure it‚Äôs running.  
- Alternatively, in PowerShell, check if Docker is running:  
  ```powershell
  docker info
  ```
  If it returns an error, **start Docker Desktop** manually.

---

### **2Ô∏è‚É£ Start the Docker Container (Backend Execution Environment)**  
Now, run the backend inside Docker using:  
```powershell
docker-compose up -d  # Starts the container in detached mode
```
This ensures the backend runs inside a secure, containerized environment.

To check if it's running:  
```powershell
docker ps
```
Make sure `secure-runner` is listed.

---

### **3Ô∏è‚É£ Start the Backend Server (`index.js`)**  
Your Node.js backend **must** be running to handle API requests:  
```powershell
cd server
node index.js
```
This starts the Express server, allowing it to handle incoming API calls.

---

### **4Ô∏è‚É£ Start the Frontend**  
Finally, run the frontend in **a separate terminal**:  
```powershell
cd client
npm run dev
```
Your app should now be fully functional!

---

### **‚úÖ Summary (Order of Execution)**
1. **Ensure Docker Engine is running**  
2. **Start the Docker container** ‚Üí `docker-compose up -d`  
3. **Run the backend server** ‚Üí `node index.js`  
4. **Run the frontend** ‚Üí `npm run dev`  

Now, test it in **Insomnia/Postman** or visit the frontend in your browser. üöÄ


 docker run -it -p 5000:5000 -v /var/run/docker.sock:/var/run/docker.sock online-compiler-backend /bin/bash

 docker run -d -p 5000:5000 -v /var/run/docker.sock:/var/run/docker.sock online-compiler-backend

docker run -d -p 5000:5000 -v /var/run/docker.sock:/var/run/docker.sock online-compiler-backend

with env: docker run -d -p 5000:5000 -v /var/run/docker.sock:/var/run/docker.sock --env-file server/.env online-compiler-backend

docker stop $(docker ps -aq) 
docker rm $(docker ps -aq) 